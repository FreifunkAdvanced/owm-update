#!/bin/sh
# OpenWifiMap updater script
# By CyrusFox
# Utilizes libubox's jshn.sh 
# Sadly the current (AA 12.09) package version doesnt support double types
# therefore it will be limited to basic data + postalAddress + interfaces
# For necessary stuff like latitude and longitude the json request is build
# with echo ;)

fail() {
    echo "$1" 1>&2
    exit 1
}

get_iface () {
	local interface=$1
	local iface=$(uci get network.$interface.ifname)
	local type=$(uci -q get network.$interface.type)
	[ "bridge" = "$type" ] && iface="br-$interface"
	echo $iface
}

mask2cidr() {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}


get_rev() {
	echo -e "HEAD /openwifimap/$nodeid HTTP/1.1\r
User-Agent: ffmapupdate\r
Host: $map_server\r
Connection: close\r
\r
" | netcat -w 1 $map_server 80 > /tmp/owm_revision
	echo $(cat /tmp/owm_revision) | grep ETag | cut -d '"' -f2
}

send_update() {
	local rev=$(get_rev)
	if [ -z $rev ]; then 
		echo -e "PUT /openwifimap/$nodeid HTTP/1.1\r
User-Agent: ffmapupdate\r
Host: $map_server\r
Connection: close\r
Accept: */*\r
Content-Type: application/json\r
Content-Length: $(wc -c /tmp/map/$host.json | cut -d ' ' -f1 )\r
\r
$(cat /tmp/map/$host.json)\r
\r
" | netcat -v -w 1 $map_server 80 > /tmp/owm_update
	else
		echo -e "PUT /openwifimap/$nodeid?rev=$rev HTTP/1.1\r
User-Agent: ffmapupdate\r
Host: $map_server\r
Connection: close\r
Accept: */*\r
Content-Type: application/json\r
Content-Length: $(wc -c /tmp/map/$host.json | cut -d ' ' -f1 )\r
\r
$(cat /tmp/map/$host.json)\r
\r
" | netcat -v -w 1 $map_server 80 > /tmp/owm_update
	fi
}

generate_json_postalAddress() {
	# Postal Address section
	local postal_name=$(uci -q get owm.settings.postal_name)
	local postal_street=$(uci -q get owm.settings.postal_street)
	local postal_zip=$(uci -q get owm.settings.postal_zip)
	local postal_city=$(uci -q get owm.settings.postal_city)
	local postal_country=$(uci -q get owm.settings.postal_country)

	if [ -n "$postal_name" \
		-o -n "$postal_street" \
		-o -n "$postal_zip" \
		-o -n "$postal_city" \
		-o -n "$postal_country" ]; then
		local jsondata=$(
			. /usr/share/libubox/jshn.sh
			json_init 
			[ -n "$postal_name" ] && json_add_string "name" "$postal_name"
			[ -n "$postal_street" ] && json_add_string "street" "$postal_street"
			[ -n "$postal_zip" ] && json_add_string "zip" "$postal_zip"
			[ -n "$postal_city" ] && json_add_string "city" "$postal_city"
			[ -n "$postal_country" ] && json_add_string "country" "$postal_country"
			echo $(json_dump)
		)
		echo $jsondata
	fi
}

generate_json_interfaces() {
	# Wired / Batman / Mesh Interfaces section
	local interfaces=$(uci -q get owm.settings.interfaces)
	local active=$(uci -q get owm.settings.gen_interfaces)
	
	[ -z "$interfaces" ] && local interfaces="mesh adhoc"
	
	if [ "$active" == "true" ]; then
		for interface in $interfaces 
		do
			if [ "$(ubus call network.interface.$interface status | grep '"up"': | cut -d ' ' -f2 | cut -d ',' -f1)" == "true" ]; then
				#Get stuff
				local l3_device=$(get_iface $interface)
				local macaddr=$(ubus call network.device status '{ "name": "'$l3_device'" }' | grep "macaddr" | cut -d '"' -f4)
				local name=$interface
				local ip4addr=$(ifconfig $l3_device | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')
				local ip4mask=$(mask2cidr $(ifconfig $l3_device | grep Mask | sed s/^.*Mask://))
				local ip6addrs=$(ifconfig $l3_device | awk '/inet6 addr/ {print $3}')
				local jsondata=$(
				. /usr/share/libubox/jshn.sh
				json_init 
				json_add_string "name" "$name"
				json_add_string "physicalType" "ethernet"
				json_add_string "macAddress" "$macaddr"
				if [ -n "$ip4addr" -a -n "$ip4mask" ]; then
					json_add_array ipv4Addresses
					json_add_string 0 "$ip4addr/$ip4mask"
					json_close_array
				fi
				if [ -n "$ip6addrs" ]; then
					json_add_array ipv6Addresses
					for ip6addr in $ip6addrs
					do
						json_add_string 0 "$ip6addr"
					done
					json_close_array
				fi
				echo $(json_dump)
				)
				echo $jsondata >> /tmp/map/interfaces/"$interface"-iface.json
			fi
		done
		interface_count=$(ls -l /tmp/map/interfaces/ | grep iface.json | wc -l)
		counter="1"
		for jsonfile in $(find /tmp/map/interfaces/ | grep iface.json)
		do
			cat $jsonfile >> /tmp/map/interfaces/all.json
			counter_new=`expr $counter + 1`
			if [ "$counter_new" -le "$interface_count" ]; then
				echo ',' >> /tmp/map/interfaces/all.json
			fi
			counter="$counter_new"
		done
		echo $(cat /tmp/map/interfaces/all.json)
	fi
}

generate_json_ipv4defaultGateway() {
	local defroute=$(route -n | grep ^0.0.0.0)
	local defroute_gw=$(echo $defroute | awk '{print $2}')
	local defroute_metric=$(echo $defroute | awk '{print $5}')
	local defroute_iface=$(echo $defroute | awk '{print $8}')
	local active=$(uci -q get owm.settings.gen_routes)
	local interfaces_active=$(uci -q get owm.settings.gen_interfaces)
	
	if [ -n "$defroute" -a "$active" == "true" -a "$interfaces_active" == "true" ]; then
	
		local jsondata=$(
		. /usr/share/libubox/jshn.sh
		json_init 
		json_add_string gateway "$defroute_gw"
		json_add_string dev "$defroute_iface"
		json_add_string metr "$defroute_metric"
		echo $(json_dump)
		)
		
		echo $jsondata
	fi
}

generate_json_ipv6defaultGateway() {
	local defroute=$(route -n -A inet6 | grep ^::/0)
	local defroute_gw=$(echo $defroute | awk '{print $2}')
	local defroute_metric=$(echo $defroute | awk '{print $4}')
	local defroute_iface=$(echo $defroute | awk '{print $7}')
	local active=$(uci -q get owm.settings.gen_routes)
	local interfaces_active=$(uci -q get owm.settings.gen_interfaces)
	
	if [ -n "$defroute" -a "$active" == "true" -a "$interfaces_active" == "true" ]; then
		local jsondata=$(
		. /usr/share/libubox/jshn.sh
		json_init 
		json_add_string gateway "$defroute_gw"
		json_add_string dev "$defroute_iface"
		json_add_string metr "$defroute_metric"
		echo $(json_dump)
		)
		echo $jsondata
	fi
}

generate_json_firmware() {
	local firmware_file="/etc/firmware"
	local firmware_version=$(cat $firmware_file | cut -d "/" -f1)
	local firmware_name=$(cat $firmware_file | cut -d "/" -f2)
	local firmware_type=$(cat $firmware_file | cut -d "/" -f3)
	local active=$(uci -q get owm.settings.gen_firmware)
	
	if [ -n "$firmware_version" -a -n "$firmware_name" -a -n "$firmware_type" -a "$active" == "true" ]; then
		local jsondata=$(
		. /usr/share/libubox/jshn.sh
		json_init 
		json_add_string name "FF-Advanced $firmware_name $firmware_type"
		json_add_string revision "$firmware_version"
		echo $(json_dump)
		)
		echo $jsondata
	fi
}

generate_json () {
	#Add basic (necessary) stuff
	echo '{"type": "node", "hostname": "'$host.$zonename'", "longitude": '$lon', "latitude": '$lat', "updateInterval": '$interval',' > /tmp/map/"$host".json
	#Add postal (Dude) stuff :D
	postalAddress=$(generate_json_postalAddress)
	[ -n "$postalAddress" ] && echo '"postalAddress": '$postalAddress',' >> /tmp/map/"$host".json
	#Add interfaces
	interfaces=$(generate_json_interfaces)
	[ -n "$interfaces" ] && echo '"interfaces": ['$interfaces'],' >> /tmp/map/"$host".json
	#Add default routes
	ipv4defaultGateway=$(generate_json_ipv4defaultGateway)
	[ -n "$ipv4defaultGateway" ] && echo '"ipv4defaultGateway": '$ipv4defaultGateway','  >> /tmp/map/"$host".json
	ipv6defaultGateway=$(generate_json_ipv6defaultGateway)
	[ -n "$ipv6defaultGateway" ] && echo '"ipv6defaultGateway": '$ipv6defaultGateway','  >> /tmp/map/"$host".json
	#Add firmware info
	firmware=$(generate_json_firmware)
	[ -n "$firmware" ] && echo '"firmware": '$firmware','  >> /tmp/map/"$host".json
	
	#Close json
	echo '"lastupdate": "'$(date -u "+%Y-%m-%dT%H:%M:%SZ")'"}'  >> /tmp/map/"$host".json
}

update() {
	if [ $(uci -q get owm.settings.public) == "true" -a "$host" != "ffnode" ]; then
		logger -t owm-update "Update node $host.$zonename on server $map_server"
		echo "Update node $host.$zonename on server $map_server"
		generate_json
		send_update
	else
		logger -t owm-update "Node is private or hostname is not set, not updating..."
		echo "Node is private or hostname is not set, not updating..."
	fi
}



printArgs () {
    fail "Usage:
$0 update_map or update
"
}
[ $# -lt 1 ] && printArgs

interval=$(uci -q get owm.settings.interval)
zonename=$(uci -q get owm.settings.zonename)
lat=$(uci -q get owm.settings.lat)
lon=$(uci -q get owm.settings.lon)
map_server=$(uci -q get owm.settings.map_server)
nodeid=$(cat /etc/nodeid)
host=$(cat /proc/sys/kernel/hostname)

[ -z $interval ] && fail "Interval not set in OWM config"
[ -z $zonename ] && fail "Zonename not set in OWM config"
[ -z $lat -o -z $lon ] && fail "Latitude or Longitude not set in OWM config"
[ -z $map_server ] && fail "Map server not set in OWM config"
[ -z $nodeid ] && fail "NodeID not set yet, please wait for NodeID script to run.."

[ -d "/tmp/map/interfaces" ] || mkdir -p /tmp/map/interfaces
rm -f /tmp/map/*.json
rm -f /tmp/map/interfaces/*.json

case "$1" in
  update|update_map)
    update
    ;;
  *)
	printArgs
    ;;
esac
